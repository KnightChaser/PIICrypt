# src/piicrypt/cli.py
from __future__ import annotations
import os
import sys
import json
from pathlib import Path
from typing import Optional, List, Any

import typer
from presidio_anonymizer.entities.engine.result import OperatorResult

from .core import PIIAnalyzer, PIIAnalyzerConfig

app = typer.Typer(
    no_args_is_help=True,
    add_completion=False,
    help="Encrypt/decrypt ONLY the PII spans in text using Microsoft Presidio (AES-CBC).",
)


def _resolve_key(key: Optional[str]) -> str:
    """
    Resolve the AES key from the command line or environment variable.
    """
    k = key or os.getenv("PII_CRYPT_KEY")
    if not k:
        raise typer.BadParameter("Provide --key or set PII_CRYPT_KEY.")
    return k


def _read_text(path: str | None) -> str:
    """
    Read text from a file or stdin.
    """
    if not path or path == "-":
        return sys.stdin.read()
    return Path(path).read_text(encoding="utf-8", errors="ignore")


def _write_text(path: str | None, data: str) -> None:
    """
    Write text to a file or stdout.
    """
    if not path or path == "-":
        sys.stdout.write(data)
        return
    p = Path(path)
    p.parent.mkdir(parents=True, exist_ok=True)
    p.write_text(data, encoding="utf-8")


def _write_json(path: str, obj: Any) -> None:
    """
    Write JSON to a file.
    """
    p = Path(path)
    p.parent.mkdir(parents=True, exist_ok=True)
    p.write_text(json.dumps(obj, ensure_ascii=False, indent=2), encoding="utf-8")


# ------------------ ENCRYPT ------------------


@app.command("encrypt", help="Detect PII and encrypt only those spans.")
def cmd_encrypt(
    input_path: Optional[str] = typer.Argument("-", help="File path or '-' for stdin."),
    output_path: Optional[str] = typer.Option(
        "-", "--output", "-o", help="Output file or '-' for stdout."
    ),
    key: Optional[str] = typer.Option(None, "--key", help="AES key (16/24/32 chars)."),
    lang: str = typer.Option("en", "--lang", help="Language code, e.g., en/es."),
    entities: Optional[List[str]] = typer.Option(
        None,
        "--entities",
        "-e",
        help="Limit to selected entities (e.g., -e EMAIL_ADDRESS PHONE_NUMBER)",
    ),
    custom: bool = typer.Option(
        False, "--custom", help="Enable demo custom recognizer."
    ),
    entities_out: Optional[str] = typer.Option(
        None,
        "--entities-out",
        help="Where to write entities JSON (default: <output>.entities.json if --output is a file). ",
    ),
):
    text = _read_text(input_path)
    analyzer = PIIAnalyzer(
        PIIAnalyzerConfig(language=lang, entities=entities, use_custom=custom)
    )
    enc_text, enc_entities = analyzer.encrypt_text(text, key=_resolve_key(key))

    # write encrypted text
    _write_text(output_path, enc_text)

    # write entities as JSON (NOT str(...))
    if output_path == "-":
        if not entities_out:
            raise typer.BadParameter("--entities-out is required when --output is '-'")
        _write_json(entities_out, enc_entities)
        typer.echo(
            f"Encrypted {len(enc_entities)} PII spans. Entities -> {entities_out}"
        )
    else:
        sidecar = entities_out or f"{output_path}.entities.json"
        _write_json(sidecar, enc_entities)
        typer.echo(f"Encrypted {len(enc_entities)} PII spans. Entities -> {sidecar}")


# ------------------ DECRYPT ------------------


@app.command(
    "decrypt", help="Decrypt PII spans using the same key and entities from encrypt()."
)
def cmd_decrypt(
    input_path: Optional[str] = typer.Argument("-", help="File path or '-' for stdin."),
    output_path: Optional[str] = typer.Option(
        "-", "--output", "-o", help="Output file or '-' for stdout."
    ),
    key: Optional[str] = typer.Option(None, "--key", help="AES key (16/24/32 chars)."),
    entities_path: Optional[str] = typer.Option(
        None,
        "--entities",
        help="Path to entities JSON generated by encrypt (defaults to <input>.entities.json).",
    ),
):
    enc_text = _read_text(input_path)

    # locate entities sidecar
    if not entities_path:
        if input_path and input_path != "-":
            guess = f"{input_path}.entities.json"
            if Path(guess).exists():
                entities_path = guess
        if not entities_path:
            raise typer.BadParameter("Provide --entities <path> for the JSON sidecar.")

    # load JSON list[dict] -> list[OperatorResult]
    raw = json.loads(_read_text(entities_path))
    if not isinstance(raw, list):
        raise typer.BadParameter(
            f"Entities file must be a JSON array, got {type(raw).__name__}"
        )
    enc_entities: List[OperatorResult] = [
        OperatorResult.from_json(item) for item in raw
    ]

    analyzer = PIIAnalyzer()
    out = analyzer.decrypt_text(enc_text, key=_resolve_key(key), entities=enc_entities)
    _write_text(output_path, out)
    typer.echo("Decryption completed.")
